     1                                  [org 0x0100]
     2                                  
     3                                  
     4                                  ;merge sort(merging two sorted arrays into single array)
     5                                  
     6 00000000 BB[3800]                mov bx,arr1   ;storing the address of first element of array1
     7 00000003 BE[4000]                mov si,arr2   ;storing the address of first element of array2
     8 00000006 BD[4800]                mov bp,result ;storing the address of first element of result
     9 00000009 BF[5A00]                mov di,result+18
    10                                  
    11                                  loop1:
    12 0000000C 8B07                    mov ax,[bx]   ;storing the first element of array1 to ax register
    13 0000000E 8B0C                    mov cx,[si]   ;storing the first element of array2 to cx register
    14                                  
    15 00000010 39C8                    cmp ax,cx     ;comparing the elements of two arrays
    16 00000012 7202                    jb store      ;if the first element of array1 is smaller than the first element of array2 than jump to store this in result 
    17 00000014 7711                    ja sto
    18                                  
    19                                  store:
    20 00000016 894600                  mov [bp],ax   ;moving the first element of ax to first index of result
    21 00000019 81C30200                add bx,2      ;now bx points to second element of array1
    22 0000001D 81C50200                add bp,2      ;bp points to second slot in result   
    23 00000021 39FD                    cmp bp,di  ;checks whether end of result has reached or not to exit
    24 00000023 7435                    jz exit       
    25 00000025 EBE5                    jmp loop1 
    26                                  
    27                                  sto:
    28 00000027 894E00                  mov [bp],cx   ;moving element of array2 to result
    29 0000002A 81C60200                add si,2      ;pointing si register to the next element in array2
    30 0000002E 81C50200                add bp,2      ;pointing bp to next empty slot in result
    31 00000032 39FD                    cmp bp,di
    32 00000034 7424                    jz exit
    33 00000036 EBD4                    jmp loop1 
    34                                  
    35                                  
    36 00000038 0100030005000700        arr1:dw 1,3,5,7
    37 00000040 0200040006000800        arr2:dw 2,4,6,8
    38 00000048 000000000000000000-     result:dw 0,0,0,0,0,0,0,0
    39 00000051 00000000000000     
    40 00000058 0000                    flag: dw 0
    41                                  
    42                                  exit:
    43 0000005A C706[5800]0100          mov word[flag],1
    44 00000060 B8004C                  mov ax,0x4c00
    45 00000063 CD21                    int 21h
